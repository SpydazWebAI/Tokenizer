<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>SpydazWebAI_Class_Tokenizer</name>
  </assembly>
  <members>
    <member name="T:ClassTokenizer.ClassTokenizer">
      <summary>
Tokenizer For NLP Techniques</summary>
    </member>
    <member name="F:ClassTokenizer.ClassTokenizer.ClassId">
    </member>
    <member name="F:ClassTokenizer.ClassTokenizer.EventsId">
    </member>
    <member name="F:ClassTokenizer.ClassTokenizer.InterfaceId">
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.Tokenizer(System.String@)">
      <summary>
Returns Characters in String as list</summary>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.Tokenizer(System.String@,System.String@)">
      <summary>
Return Tokens in string divided by seperator</summary>
      <param name="InputStr">
</param>
      <param name="Divider">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.GetTokenFrequency(System.String@,System.String@)">
      <summary>
Gets Frequency of token</summary>
      <param name="Token">
</param>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.GetWordFrequecys(System.String,System.String)">
      <param name="_Text">
</param>
      <param name="Delimiter">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.GetTokenType(System.String@)">
      <summary>
each charcter can be defined as a particular token enabling for removal of unwanted token types</summary>
      <param name="CharStr">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.GetValidTokens(System.String@)">
      <summary>
Returns valid tokens only tokens that are not defined are removed</summary>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.AlphanumericOnly(System.String@)">
      <param name="Str">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.RemoveTokenType(System.String@,ClassTokenizer.Constituants.TokenType@)">
      <summary>
Removes Tokens From String by Type</summary>
      <param name="UserStr">
</param>
      <param name="nType">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.CountTokens(System.String@,System.String@)">
      <summary>
Counts tokens in string</summary>
      <param name="InputStr">
</param>
      <param name="Delimiter">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.ContainsEncapsulated(System.String@)">
      <summary>
Checks if input contains Ecapuslation Punctuation</summary>
      <param name="Userinput">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.GetEncapsulated(System.String@)">
      <summary>
Gets encapsulated items found in userinput</summary>
      <param name="Userinput">
</param>
    </member>
    <member name="M:ClassTokenizer.ClassTokenizer.ExtractEncapsulated(System.String@)">
      <summary>
Extracts first Encapsulated located in string</summary>
      <param name="Userinput">
</param>
    </member>
    <member name="T:ClassTokenizer.Constituants">
      <summary>
Grammer and syntax Components</summary>
    </member>
    <member name="T:ClassTokenizer.Constituants.TokenType">
      <summary>
Recognized Tokens</summary>
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.GramaticalPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.EncapuslationPunctuationStart">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.EncapuslationPunctuationEnd">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.MoneyPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.MathPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.CodePunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.AlphaBet">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.Number">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.SeperatorPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.TokenType.Ignore">
    </member>
    <member name="F:ClassTokenizer.Constituants.AlphaBet">
    </member>
    <member name="F:ClassTokenizer.Constituants.CodePunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.EncapuslationPunctuationEnd">
    </member>
    <member name="F:ClassTokenizer.Constituants.EncapuslationPunctuationStart">
    </member>
    <member name="F:ClassTokenizer.Constituants.GramaticalPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.MathPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.MoneyPunctuation">
    </member>
    <member name="F:ClassTokenizer.Constituants.Number">
    </member>
    <member name="F:ClassTokenizer.Constituants.SeperatorPunctuation">
    </member>
    <member name="T:ClassTokenizer.Constituants.WordFrequecys">
    </member>
    <member name="M:ClassTokenizer.Constituants.WordFrequecys.ToString">
      <summary>
Returns the fully qualified type name of this instance.</summary>
    </member>
    <member name="F:ClassTokenizer.Constituants.WordFrequecys.frequency">
    </member>
    <member name="F:ClassTokenizer.Constituants.WordFrequecys.word">
    </member>
    <member name="T:ClassTokenizer.TokenizerExt">
      <summary>
Extension Methods for tokeninzer Fucntions</summary>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.CountTokens(System.String@,System.String@)">
      <summary>
Counts tokens in string</summary>
      <param name="InputStr">
</param>
      <param name="Delimiter">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.AlphanumericOnly(System.String@)">
      <param name="Str">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.RemoveTokenType(System.String@,ClassTokenizer.Constituants.TokenType@)">
      <summary>
Removes Tokens From String by Type</summary>
      <param name="UserStr">
</param>
      <param name="nType">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.Tokenizer(System.String@)">
      <summary>
Returns Characters in String as list</summary>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.Tokenizer(System.String@,System.String@)">
      <summary>
Return Tokens in string divided by seperator</summary>
      <param name="InputStr">
</param>
      <param name="Divider">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.GetTokenFrequency(System.String@,System.String@)">
      <param name="Token">
</param>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.GetWordFrequecys(System.String,System.String)">
      <param name="_Text">
</param>
      <param name="Delimiter">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.GetTokenType(System.String@)">
      <summary>
each charcter can be defined as a particular token enabling for removal of unwanted token types</summary>
      <param name="CharStr">
</param>
    </member>
    <member name="M:ClassTokenizer.TokenizerExt.GetValidTokens(System.String@)">
      <summary>
Returns valid tokens only tokens that are not defined are removed</summary>
      <param name="InputStr">
</param>
    </member>
    <member name="T:ClassTokenizer.StringExtensions">
      <summary>
Extension methods for string functions</summary>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractStringBetween(System.String,System.String,System.String)">
      <summary>
extracts string between defined strings</summary>
      <param name="value">
base sgtring</param>
      <param name="strStart">
Start string</param>
      <param name="strEnd">
End string</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.AddPrefix(System.String@,System.String)">
      <summary>
Adds string to front of string (no spaces)</summary>
      <param name="Str">
base string</param>
      <param name="Prefix">
Add before (no spaces)</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.AddSuffix(System.String@,System.String)">
      <summary>
Adds Suffix to String (No Spaces)</summary>
      <param name="Str">
Base string</param>
      <param name="Suffix">
To be added After</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractLastWord(System.String@)">
      <summary>
Returns The last word in String NOTE: String ois converted to Array then the last element is extracted Count-1</summary>
      <returns>
String</returns>
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractSuffix(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractLastChar(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractFirstWord(System.String@)">
      <param name="Statement">
</param>
    </member>
    <member name="M:ClassTokenizer.StringExtensions.ExtractPrefix(System.String@)">
      <param name="Statement">
</param>
    </member>
    <member name="T:ClassTokenizer.TermDocumentMatrixExtensions">
      <summary>
Term Document matrix functions and Extension methods</summary>
    </member>
    <member name="M:ClassTokenizer.TermDocumentMatrixExtensions.GetNgrms(System.String@,System.Int32@)">
      <summary>
Returns n-Grams</summary>
      <param name="Str">
Input Str</param>
      <param name="Ngrams">
number of Grams</param>
    </member>
    <member name="M:ClassTokenizer.TermDocumentMatrixExtensions.InverseTermDocumentFrequency(System.String@,System.Collections.Generic.List{System.String}@)">
      <summary>
IDF(t) = log_e(Total number of documents / Number of documents with term t in it).</summary>
      <param name="Word">
</param>
      <param name="Documents">
</param>
    </member>
    <member name="M:ClassTokenizer.TermDocumentMatrixExtensions.InverseTermFrequency(System.String@,System.String@)">
      <summary>
IDF: Inverse Document Frequency, which measures how important a term Is. While computing TF,      all terms are considered equally important. However it Is known that certain terms, such      As "is", "of", And "that", may appear a lot Of times but have little importance. Thus we      need To weigh down the frequent terms While scale up the rare ones, by computing the following: IDF(t) = log_e(Total number of documents / Number of documents with term t in it).</summary>
      <param name="Userinput">
</param>
      <param name="Term">
</param>
    </member>
    <member name="M:ClassTokenizer.TermDocumentMatrixExtensions.TermFrequency(System.String@,System.String@)">
      <summary>
TF: Term Frequency, which measures how frequently a term occurs In a document. Since every     document Is different In length, it Is possible that a term would appear much more times     In Long documents than shorter ones. Thus, the term frequency Is often divided by the     document length (aka. the total number Of terms In the document) As a way Of normalization: TF(t) = (Number of times term t appears in a document) / (Total number of terms in the document).</summary>
      <param name="InputStr">
</param>
      <param name="Term">
</param>
    </member>
    <member name="N:ClassTokenizer">
    </member>
  </members>
</doc>
